<?php declare(strict_types=1);

namespace Sportisimo\ProcessDoc\Presenters;

use Sportisimo\ProcessDoc\Model\Entities\Lists\ApplicationList;
use Sportisimo\ProcessDoc\Model\Entities\ProcessDetail;
use Sportisimo\ProcessDoc\Model\Facades\ProcessTreeFacade;

/**
 * Class ProcessTreePresenter
 * Copyright (c) 2020 Sportisimo s.r.o.
 * @package Sportisimo\ProcessDoc\Presenters;
 */
final class ProcessTreePresenter extends AppBasePresenter
{
  /**
	 * Nacteni fasady
   * @var ProcessTreeFacade
   */
	private ProcessTreeFacade $processTreeFacade;

  /**
   * ID rodice procesu
   * @var int|null
   */
	private ?int $processParentId;

  /**
	 * Id aplikace pro kterou chceme zobrazit procesy
   * @var int|null
   */
	private ?int $applicationId;
	/**
	 * @var ApplicationList
	 */
	private ApplicationList $applicationList;

	public function __construct(
    ProcessTreeFacade $processTreeFacade,
		ApplicationList $applicationList
  )
	{
    parent::__construct();
    $this->processTreeFacade = $processTreeFacade;
		$this->applicationList = $applicationList;
  } // __construct()

  /**
   * Funkce na zpracovani zakladnich parametru. TODO: Doresim popis funkce
   */
  public function processBaseParams(): void
  {
    $applicationId = $this->getIntParam('applicationId'); // id aplikace pro ktere chci zobrazit rodice
		$applicationListIds = $this->applicationList->getList();


    if(in_array($applicationId, $applicationListIds))
    {
      $this->applicationId = $applicationId;
    }
    else
    {
			$this->applicationId = null;
			$this->flashMessage->error('Vložen neexistující parametr');
			$this->redirect("ApplicationList:".ApplicationListPresenter::ACTION_DEFAULT_NAME);
		}

    $processParentId = $this->getIntParam('processParentId'); // processParentId definuje zanoreni
    if ($processParentId != null)
    {
      $this->processParentId = $processParentId;

      if($this->applicationId != null)
      {
      	$params = $this->getParameters();
      	unset($params['applicationId']);
      	$this->redirect('this',$params);
			}
    }else{
			$this->processParentId = null;
		}
  } // processBaseParams()

	public function actionDefault(): void
  {
     $this->processBaseParams();

			if($this->checkSignal("redirectToProcessTree"))
			{
				$processParentId = $this->getIntParam("targetProcessParentId");
				$this->handleRedirectToProcessTree($processParentId);
			}

		if($this->checkSignal("redirectToProcessDetail"))
		{
			$processId = $this->getIntParam("processId");
			$version = $this->getIntParam("version");
			$this->handleRedirectToProcessDetail($processId,$version);
		}
  } // actionDefault()

	private function handleRedirectToProcessTree(int $processParentId): void
	{
		$this->requestResponseService->storeRequest(true,'+1 hour',['targetProcessParentId']);
		$this->redirect("ProcessTree:".ProcessTreePresenter::ACTION_DEFAULT_NAME, [ "processParentId" => $processParentId] );
	}

	private function handleRedirectToProcessDetail(int $processId, int $version): void
	{
		$this->requestResponseService->storeRequest(true,'+1 hour',['processId', 'version']);
		$this->redirect("ProcessDetail:".ProcessDetailPresenter::ACTION_DEFAULT_NAME, [ "processId" => $processId, "version" => $version ] );
	}

  /**
   * Funkce pro vykresleni vychozi akce presenteru
   *
	 */
  public function renderDefault(): void
  {
		$data = array(); // inicializace promene data

		try {
			$data = $this->processTreeFacade->prepareDefaultData($this->applicationId, $this->processParentId);
		}catch (\Throwable $e) {
		//	$this->forward(); // TODO: dodelat vyjimku
		}

		$this->getTemplate()->setParameters([
    'data' => $data,
    ]);

    bdump($data); // TODO: bdump
  } // renderDefault()



}
